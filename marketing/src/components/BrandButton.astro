---
export interface Props {
  variant?: 'primary' | 'secondary' | 'accent' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  class?: string;
  type?: 'submit' | 'reset' | 'button';
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type,
  class: className = ''
} = Astro.props;

// Dynamic classes based on variant and size
const variantClasses = {
  primary: 'bg-brand-primary-500 hover:bg-brand-primary-600 text-white shadow-lg hover:shadow-xl',
  secondary: 'bg-brand-secondary-500 hover:bg-brand-secondary-600 text-white shadow-lg hover:shadow-xl',
  accent: 'bg-brand-accent-500 hover:bg-brand-accent-600 text-white shadow-lg hover:shadow-xl',
  outline: 'border-2 border-brand-primary-500 text-brand-primary-500 hover:bg-brand-secondary-500 hover:text-white hover:border-transparent hover:shadow-lg',
  ghost: 'text-brand-primary-500 hover:bg-brand-primary-50 hover:text-brand-primary-600'
};

const sizeClasses = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg'
};

const baseClasses = 'inline-flex items-center justify-center rounded-lg font-medium transition-all duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-brand-primary-500 focus:ring-offset-2';
const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;
---

{href ? (
  <a href={href} class={classes}>
    <slot />
  </a>
) : (
  <button type={type} class={classes}>
    <slot />
  </button>
)}