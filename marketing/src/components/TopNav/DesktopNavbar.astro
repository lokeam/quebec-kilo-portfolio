---
// DesktopNavbar component - desktop-specific logic and layout
import NavBarItem from '@/components/TopNav/NavBarItem.astro';
import Logo from '@/components/Logo.astro';
import Button from '@/components/ui/Button.astro';
import BrandButton from '@/components/BrandButton.astro';
import ShineWrapper from '@/components/ui/ShineWrapper.astro';

interface Props {
  navItems: {
    title: string;
    link: string;
    target?: "_blank";
  }[];
}

const { navItems } = Astro.props;
---

<div class="hidden lg:flex flex-row self-center items-center justify-between py-2 mx-auto px-6 rounded-full relative z-[60] backdrop-saturate-[1.8]" id="desktop-nav">
  <div class="flex items-center">
    <a class="inline-flex items-center gap-2 text-white font-bold" href="/">
      <Logo /> QKO
    </a>
  </div>

  <div class="lg:flex flex-row flex-1 items-center justify-center space-x-1 text-sm" id="nav-items">
    {navItems.map((item) => (
      <NavBarItem href={item.link} target={item.target}>
        {item.title}
      </NavBarItem>
    ))}
  </div>

  <div class="flex items-center gap-2" id="nav-actions">
    <BrandButton
      variant="outline"
      size="md"
      href="/login"
      class="hidden md:block rounded-full text-white border-0"
    >
      Login
    </BrandButton>
    <ShineWrapper shineColor="white" shineDuration="normal" id="shine-wrapper">
      <BrandButton
        variant="primary"
        size="md"
        href="/login"
        class="hidden md:block rounded-full text-white border-0"
      >
        Sign up
      </BrandButton>
    </ShineWrapper>
  </div>
</div>

<script>
  import { animate } from "motion";

  function initDesktopNavbar() {
    const desktopNav = document.getElementById('desktop-nav');
    const navItems = document.getElementById('nav-items');
    const navActions = document.getElementById('nav-actions');
    const shineWrapper = document.getElementById('shine-wrapper');
    let visible = false;

    const updateBackground = () => {
      const scrollY = window.scrollY;
      const shouldBeVisible = scrollY > 100;

      if (shouldBeVisible !== visible) {
        visible = shouldBeVisible;

        if (desktopNav) {
          // Set initial state
          desktopNav.style.transform = 'translateY(0px)';

          // Animate with explicit initial keyframes
          animate(
            desktopNav,
            {
              backdropFilter: ["blur(0px)", "blur(16px)"],
              background: visible ? "rgba(0, 0, 0, 0.7)" : "rgba(0, 0, 0, 0.4)",
              width: visible ? "38%" : "80%",
              height: visible ? "48px" : "64px",
              transform: visible ? ['translateY(0px)', 'translateY(8px)'] : ['translateY(8px)', 'translateY(0px)'],
            },
            {
              type: "spring",
              stiffness: 400,
              damping: 30,
            }
          );
        }

        if (navItems) {
          // Animate scale with explicit initial keyframes
          animate(
            navItems,
            {
              scale: visible ? [1, 0.9] : [0.9, 1],
            },
            {
              type: "spring",
              stiffness: 400,
              damping: 30,
            }
          );

          // Handle justifyContent manually (not animatable)
          if (visible) {
            navItems.style.justifyContent = 'flex-end';
          } else {
            navItems.style.justifyContent = 'center';
          }
        }

        if (shineWrapper) {
          if (visible) {
            // When scrolled - scale down to match other nav items
            animate(
              shineWrapper,
              {
                scale: [1, 0.9],
                opacity: [1, 1],
              },
              {
                type: "spring",
                stiffness: 400,
                damping: 25,
              }
            );
          } else {
            // When at top - normal size
            animate(
              shineWrapper,
              {
                scale: [0.9, 1],
                opacity: [1, 1],
              },
              {
                type: "spring",
                stiffness: 400,
                damping: 25,
              }
            );
          }
        }
      }
    };

    // Remove existing scroll listener to prevent dupes
    window.removeEventListener('scroll', updateBackground);
    window.addEventListener('scroll', updateBackground);

    // Initial check
    updateBackground();
  }

  // Initialize on page load
  initDesktopNavbar();

  // Re-attach even listeners on Astro navigation
  document.addEventListener('astro:page-load', initDesktopNavbar);

  // Also re-initialize on DOMContentLoaded for fallback
  document.addEventListener('DOMContentLoaded', initDesktopNavbar);
</script>