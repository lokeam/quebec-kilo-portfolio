---
// NavBarItem component - reusable nav item
interface Props {
  href: string;
  target?: "_blank";
  active?: boolean;
  className?: string;
}

const { href, target, active, className = "" } = Astro.props;
---

<a
  href={href}
  target={target}
  class={`text-white/90 relative px-3 py-1.5 transition-colors ${className}`}
  data-nav-item
>
  <span class="relative z-10"><slot /></span>
</a>

<script>
  import { animate } from "motion";

  // Add hover effects to nav items
  const navItems = document.querySelectorAll('[data-nav-item]');

  navItems.forEach((item, index) => {
    let hoverElement = null;

    item.addEventListener('mouseenter', () => {
      // Remove existing hover elements
      document.querySelectorAll('.nav-hover-effect').forEach(el => el.remove());

      // Create hover effect element
      hoverElement = document.createElement('div');
      hoverElement.className = 'nav-hover-effect absolute inset-0 rounded-full bg-gradient-to-r from-white/10 to-white/20';
      hoverElement.style.zIndex = '5';

      // Position the hover element
      const rect = item.getBoundingClientRect();
      hoverElement.style.position = 'absolute';
      hoverElement.style.left = '0';
      hoverElement.style.top = '0';
      hoverElement.style.width = '100%';
      hoverElement.style.height = '100%';

      // Add to item
      item.style.position = 'relative';
      item.appendChild(hoverElement);

      // Animate in
      animate(
        hoverElement,
        {
          opacity: 1,
          scale: 1.1,
          background: "radial-gradient(circle at center, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0.1) 50%, transparent 100%)",
        },
        {
          type: "spring",
          bounce: 0.4,
          duration: 0.4,
        }
      );
    });

    item.addEventListener('mouseleave', () => {
      if (hoverElement) {
        animate(
          hoverElement,
          {
            opacity: 0,
            scale: 0.8,
          },
          {
            duration: 0.2,
          }
        ).then(() => {
          if (hoverElement && hoverElement.parentNode) {
            hoverElement.parentNode.removeChild(hoverElement);
          }
        });
      }
    });
  });
</script>