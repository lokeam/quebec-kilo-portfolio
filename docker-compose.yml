version: "3.8"

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.9
    command:
      - "--log.level=INFO"
      - "--api.insecure=true"                         # Traefik dashboard (insecure—use only in development)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"   # Only containers with explicit labels are exposed
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"       # HTTP entry point
      - "443:443"     # HTTPS entry point (if TLS is configured)
      - "8081:8080"   # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - web

  # Golang API Service
  api:
    build: ./backend
    environment:
      - API_ENV=development
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    # Traefik labels for routing
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"  # Internal port the API listens on
    networks:
      - web
      - backend
    depends_on:
      - redis
      - postgres

  # React Frontend Service
  frontend:
    build: ./frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://api.localhost}
    # Traefik labels so requests to frontend.localhost route here
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"  # Internal port where the frontend container serves
    networks:
      - web

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    # Traefik routing labels for Mailhog
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mailhog.localhost`)"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8026"  # Mailhog’s internal port
    networks:
      - web

  # PostgreSQL Service
  postgres:
    image: postgres:14.0
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-qkapi}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Service
  redis:
    image: redis:7.0-alpine
    command:
      - "redis-server"
      - "--maxmemory"
      - "${REDIS_MAX_MEMORY:-256mb}"
      - "--maxmemory-policy"
      - "allkeys-lru"
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

networks:
  web:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME:-postgres_data}
  redis_data:
    name: ${REDIS_VOLUME:-redis_data}