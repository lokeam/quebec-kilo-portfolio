---
version: "3.8"
services:
  traefik:
    image: traefik:v2.9
    command:
      - --log.level=INFO
      - --api.insecure=true # Traefik dashboard (insecureâ€”use only in development)
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80 # Only containers with explicit labels are exposed
      - --entrypoints.websecure.address=:443
    ports:
      - 80:80     # HTTP entry point
      - 443:443   # HTTPS entry point (if TLS is configured)
      - 8081:8080 # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - web
  api:
    build: ./backend
    env_file:
      - .env
    environment:
      API_ENV: dev
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-qkoapi}?sslmode=disable
      PORT: "8000"
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.localhost`)
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.services.api.loadbalancer.server.port=8000
      - traefik.docker.network=quebec-kilo_web # Force Traefik to use the explicit 'quebec-kilo_web' network
    networks:
      web:
        aliases:
          - api
      backend: {}
    depends_on:
      - redis
      - postgres
  frontend:
    build: ./frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://api.localhost}
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`frontend.localhost`)
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls=true
      - traefik.http.services.frontend.loadbalancer.server.port=80
    networks:
      - web
  mailhog:
    image: mailhog/mailhog:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.mailhog.rule=Host(`mailhog.localhost`)
      - traefik.http.services.mailhog.loadbalancer.server.port=8026
    networks:
      - web
  postgres:
    image: postgres:14.0
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-qkapi}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER:-postgres}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  redis:
    image: redis:7.0-alpine
    command:
      - redis-server
      - --maxmemory
      - ${REDIS_MAX_MEMORY:-256mb}
      - --maxmemory-policy
      - allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
    ports:
      - 9090:9090
    restart: unless-stopped
    networks:
      - backend
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - 3000:3000
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - prometheus
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.localhost`)
      - traefik.http.routers.grafana.entrypoints=web
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.docker.network=quebec-kilo_web
networks:
  web:
    name: quebec-kilo_web
    driver: bridge
  backend:
    name: quebec-kilo_backend
    driver: bridge
volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME:-postgres_data}
  redis_data:
    name: ${REDIS_VOLUME:-redis_data}
  prometheus_data:
    name: ${PROMETHEUS_VOLUME:-prometheus_data}
  grafana_data:
    name: ${GRAFANA_VOLUME:-grafana_data}
