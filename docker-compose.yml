version: "3.8"

services:
  # Golang API Service
  api:
    build: ./backend               # Builds the image using ./backend/Dockerfile
    ports:
      - "${API_PORT:-8000}:8000"    # Exposes port 8000 (or use API_PORT from your .env)
    environment:
      - REDIS_HOST=redis            # Docker DNS resolves "redis" to the Redis container
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    networks:
      - backend

  # Redis service
  redis:
    image: 'redis:7.0-alpine'
    command:
      - "redis-server"
      - "/usr/local/etc/redis/redis.conf"
      - "--maxmemory"
      - "${REDIS_MAX_MEMORY:-256mb}"
      - "--maxmemory-policy"
      - "allkeys-lru"
    # Volumes: "redis_data" persists data and "./redis.conf" injects custom configuration.
    volumes:
      - redis_data:/data
      # Mount the custom redis.conf file from the project root into the container.
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Postgres Service
  postgres:
    image: 'postgres:14.0'
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-55432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-qkapi}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
      - web
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mailhog:
    image: 'jcalonso/mailhog:latest'
    ports:
      - '${MAILHOG_PORT:-1026}:1026'
      - '${MAILHOG_UI_PORT:-8029}:8026'
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8026"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

networks:
  backend:
    driver: bridge
  web:
    driver: bridge

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME:-postgres_data}
  redis_data:
    name: ${REDIS_VOLUME:-redis_data}
